#!/bin/bash
#
# $ maki [role]             [task]
# $ maki [role] [namespace]:[task]
#

export LANG=C
export LC_ALL=C

# global settings

# role

role_solo() {
  nodes() { echo localhost; }
  ssh() { shift; [[ $# == 0 ]] && { eval $SHELL </dev/stdin; } || { eval $@; }; }
  targets() { echo localhost; }
}

role_prototyping() {
  nodes() { echo 192.168.2.31; }
  targets() { echo "${TARGETS:-"psv-fgw1 psv-0001 psv-0002 psv-0003 psv-0004 psv-0005"}"; }
}

# namespace:task

namespace_deploy() {
  task_download() {
    local host=${1}; shift

    if ! [[ -f /var/tmp/kemumaki-init.sh ]]; then
      curl -fSkLR https://raw.githubusercontent.com/wakameci/wakame-ci-cluster/master/kvm-guests/common/kemumaki-init.sh -o /var/tmp/kemumaki-init.sh
    fi
    chmod +x /var/tmp/kemumaki-init.sh
  }

  task_sync() {
    local host=${1}; shift

    rsync -avx --progress /var/tmp/kemumaki-init.sh    ${host}:/var/tmp/kemumaki-init.sh

    for i in $(targets); do
      ssh ${host} bash -ex <<-EOS
	sudo mkdir -p -m 755 /data/image/execscript
	sudo mkdir -p -m 755 /data/image/keys
	sudo chmod 755 /data/image/execscript
	sudo chmod 755 /data/image/keys
	sudo chown eieb-deploy:eieb-deploy /data/image/execscript
	sudo chown eieb-deploy:eieb-deploy /data/image/keys
	EOS
    done

    rsync -rlOtvxL --progress execscript ${host}:/data/image/
    rsync -rlOtvxL --progress keys/*.pub ${host}:/data/image/keys/
  }

  task_prepare() {
    local host=${1}; shift
  }

  task_setup() {
    local host=${1}; shift
  }

  task_status() {
    local host=${1}; shift

    for i in $(targets); do
      ssh ${host} bash -ex <<-EOS
	cd /data/image
	for suffix in raw pid; do
	  [[ -f ${i}.\${suffix} ]] || continue
	  ls -l ${i}.\${suffix}
	done
	EOS
    done
  }

  task_start() {
    local host=${1}; shift

    for i in $(targets); do
      case "${MAKISTRANO_ROLE}" in
        prototyping)
          # work-around for verification environment
          ssh ${host} bash -ex <<-EOS
	    cd /data/image
	    sudo sed -i \
	     -e 's,\.raw,.qcow2,' \
	     -e "s,-daemonize\$,-daemonize -serial file:${i}.console," \
	     ./run-${i}.sh
	    sudo sudo raw=${i%%.raw}.raw /var/tmp/kemumaki-init.sh
	    sudo qemu-img create -b ${i%%.raw}.raw -f qcow2 ${i%%.raw}.qcow2
	EOS
          ;;
      esac

      ssh ${host} bash -ex <<-EOS
	cd /data/image
	sudo ./run-${i}.sh
	EOS
    done
  }

  task_stop() {
    local host=${1}; shift

    for i in $(targets); do
      i2=$(tr a-z A-Z <<< "${i}")
      ssh ${host} bash -ex <<-EOS
	cd /data/image
	if [[ -f ${i}.pid ]]; then
	  sudo kill \$(sudo head -1 ${i}.pid)
	fi
	if [[ -f ${i2}.pid ]]; then
	  sudo kill \$(sudo head -1 ${i2}.pid)
	fi
	EOS
    done
  }
}

namespace_service() {
  task_status() {
    local host=${1}; shift
  }

  task_on() {
    local host=${1}; shift
  }

  task_off() {
    local host=${1}; shift
  }

  task_start() {
    local host=${1}; shift
  }

  task_stop() {
    local host=${1}; shift
  }
}

namespace_db() {
  task_init() {
    local host=${1}; shift
  }
}

namespace_logging() {
  task_tail_lines() {
    local host=${1}; shift
  }
}

namespace_test() {
  task_hostname() {
    local host=${1}; shift

    ssh ${host} hostname
  }

  task_date() {
    local host=${1}; shift

    ssh ${host} date
  }

  task_shell() {
    local host=${1}; shift

    ssh ${host} ${@}
  }

  task_run() {
    local host=${1}; shift
  }
}
